// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Creates new session for given user and gets a token for that user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "object"
                ],
                "summary": "Get a login token",
                "parameters": [
                    {
                        "description": "User request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserBodyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.LoginRequestAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates new user and session for that user and gets a token for that user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "object"
                ],
                "summary": "Create new user and login",
                "parameters": [
                    {
                        "description": "User request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserBodyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.LoginRequestAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/result/{id}": {
            "get": {
                "description": "Get a task's result by its id",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "object"
                ],
                "summary": "Get a task's result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token in format: Bearer {auth_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID объекта",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetResultHandlerAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/status/{id}": {
            "get": {
                "description": "Get a task's status by its id",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "object"
                ],
                "summary": "Get a task's status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token in format: Bearer {auth_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID объекта",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetStatusHandlerAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/task": {
            "post": {
                "description": "Create a new task with the specified request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "object"
                ],
                "summary": "Create a task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token in format: Bearer {auth_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Task request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.PostTaskHandlerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PostTaskHandlerAnswer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.ErrorMessage": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "types.GetResultHandlerAnswer": {
            "type": "object",
            "properties": {
                "task_result": {
                    "type": "string"
                }
            }
        },
        "types.GetStatusHandlerAnswer": {
            "type": "object",
            "properties": {
                "task_status": {
                    "type": "string"
                }
            }
        },
        "types.LoginRequestAnswer": {
            "type": "object",
            "properties": {
                "sessionId": {
                    "type": "string"
                }
            }
        },
        "types.PostTaskHandlerAnswer": {
            "type": "object",
            "properties": {
                "task_id": {
                    "type": "string"
                }
            }
        },
        "types.PostTaskHandlerRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "string"
                }
            }
        },
        "types.UserBodyRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "My API",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
